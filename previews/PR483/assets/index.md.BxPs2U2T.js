import{_ as t,c as n,o as l,aA as e,j as s,a as i}from"./chunks/framework.DRv5kib6.js";const E=JSON.parse('{"title":"Contents","description":"","frontmatter":{"layout":"home","hero":{"name":"SymbolicRegression.jl","text":"Discover Mathematical Laws from Data","tagline":"A flexible, user-friendly framework that automatically finds interpretable equations from your data","actions":[{"theme":"brand","text":"Get Started","link":null},{"theme":"alt","text":"API Reference 📚","link":"/api"},{"theme":"alt","text":"View on GitHub","link":"https://github.com/MilesCranmer/SymbolicRegression.jl"}],"image":{"src":"/assets/logo.svg","alt":"SymbolicRegression.jl"}},"features":[{"icon":"🔬","title":"Interpretable By Design","details":"Discovers interpretable mathematical expressions instead of black-box models."},{"icon":"🚀","title":"Production Ready","details":"Years of development have produced mature, highly optimized parallel evolutionary algorithms."},{"icon":"🔧","title":"Extremely Customizable","details":"Customize everything: operators, loss functions, complexity, input types, optimizer, and more."},{"icon":"🔌","title":"Julia Native","details":"Built for automatic interoperability with the entire scientific computing stack."}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),h={name:"index.md"};function p(r,a,o,k,g,c){return l(),n("div",null,a[0]||(a[0]=[e(`<h2 id="Example:-Rediscovering-Physical-Laws" tabindex="-1">Example: Rediscovering Physical Laws <a class="header-anchor" href="#Example:-Rediscovering-Physical-Laws" aria-label="Permalink to &quot;Example: Rediscovering Physical Laws {#Example:-Rediscovering-Physical-Laws}&quot;">​</a></h2><p>SymbolicRegression.jl can automatically discover mathematical expressions from data:</p><p>&lt;script type=&quot;module&quot;&gt; import mermaid from &#39;<a href="https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.esm.min.mjs&amp;#39;" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.esm.min.mjs&#39;</a>; mermaid.initialize({ startOnLoad: true }); &lt;/script&gt;</p><p>SymbolicRegression.jl searches for symbolic expressions which optimize a particular objective.</p><div align="center"><video width="800" height="600" controls><source src="https://github.com/MilesCranmer/SymbolicRegression.jl/assets/7593028/f5b68f1f-9830-497f-a197-6ae332c94ee0" type="video/mp4"></video></div><table><thead><tr><th align="center">Latest release</th><th align="center">Documentation</th><th align="center">Forums</th><th align="center">Paper</th></tr></thead><tbody><tr><td align="center"><a href="https://juliahub.com/ui/Packages/SymbolicRegression/X2eIS"><img src="https://juliahub.com/docs/SymbolicRegression/version.svg" alt="version"></a></td><td align="center"><a href="https://ai.damtp.cam.ac.uk/symbolicregression/dev/"><img src="https://img.shields.io/badge/docs-dev-blue.svg" alt="Dev"></a></td><td align="center"><a href="https://github.com/MilesCranmer/PySR/discussions"><img src="https://img.shields.io/badge/discussions-github-informational" alt="Discussions"></a></td><td align="center"><a href="https://arxiv.org/abs/2305.01582"><img src="https://img.shields.io/badge/arXiv-2305.01582-b31b1b" alt="Paper"></a></td></tr><tr><td align="center"><strong>Build status</strong></td><td align="center"><strong>Coverage</strong></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href=".github/workflows/CI.yml"><img src="https://github.com/MilesCranmer/SymbolicRegression.jl/workflows/CI/badge.svg" alt="CI"></a></td><td align="center"><a href="https://coveralls.io/github/MilesCranmer/SymbolicRegression.jl?branch=master"><img src="https://coveralls.io/repos/github/MilesCranmer/SymbolicRegression.jl/badge.svg?branch=master" alt="Coverage Status"></a></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>Check out <a href="https://github.com/MilesCranmer/PySR" target="_blank" rel="noreferrer">PySR</a> for a Python frontend. <a href="https://arxiv.org/abs/2305.01582" target="_blank" rel="noreferrer">Cite this software</a></p><p><strong>Contents</strong>:</p><ul><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#quickstart">Quickstart</a></p><ul><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#mlj-interface">MLJ Interface</a></p></li><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#low-level-interface">Low-Level Interface</a></p></li></ul></li><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#constructing-expressions">Constructing expressions</a></p></li><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#exporting-to-symbolicutilsjl">Exporting to SymbolicUtils.jl</a></p></li><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#contributors-">Contributors ✨</a></p></li><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#code-structure">Code structure</a></p></li><li><p><a href="/SymbolicRegression.jl/previews/PR483/index#search-options">Search options</a></p></li></ul><h2 id="Quickstart" tabindex="-1">Quickstart <a class="header-anchor" href="#Quickstart" aria-label="Permalink to &quot;Quickstart {#Quickstart}&quot;">​</a></h2><p>Install in Julia with:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pkg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SymbolicRegression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="MLJ-Interface" tabindex="-1">MLJ Interface <a class="header-anchor" href="#MLJ-Interface" aria-label="Permalink to &quot;MLJ Interface {#MLJ-Interface}&quot;">​</a></h3><p>The easiest way to use SymbolicRegression.jl is with <a href="https://github.com/alan-turing-institute/MLJ.jl" target="_blank" rel="noreferrer">MLJ</a>. Let&#39;s see an example:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SymbolicRegression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SRRegressor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MLJ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> machine, fit!, predict, report</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Dataset with two named features:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and one target:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># with some noise:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> randn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SRRegressor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    niterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    binary_operators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unary_operators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[cos],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Now, let&#39;s create and train this model on our data:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mach </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> machine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X, y)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fit!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mach)</span></span></code></pre></div><p>You will notice that expressions are printed using the column names of our table. If, instead of a table-like object, a simple array is passed (e.g., <code>X=randn(100, 2)</code>), <code>x1, ..., xn</code> will be used for variable names.</p><p>Let&#39;s look at the expressions discovered:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mach)</span></span></code></pre></div><p>Finally, we can make predictions with the expressions on new data:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">predict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mach, X)</span></span></code></pre></div><p>This will make predictions using the expression selected by <code>model.selection_method</code>, which by default is a mix of accuracy and complexity.</p><p>You can override this selection and select an equation from the Pareto front manually with:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">predict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mach, (data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X, idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>where here we choose to evaluate the second equation.</p><p>For fitting multiple outputs, one can use <code>MultitargetSRRegressor</code> (and pass an array of indices to <code>idx</code> in <code>predict</code> for selecting specific equations). For a full list of options available to each regressor, see the <a href="https://ai.damtp.cam.ac.uk/symbolicregression/dev/api/" target="_blank" rel="noreferrer">API page</a>.</p><h3 id="Low-Level-Interface" tabindex="-1">Low-Level Interface <a class="header-anchor" href="#Low-Level-Interface" aria-label="Permalink to &quot;Low-Level Interface {#Low-Level-Interface}&quot;">​</a></h3><p>The heart of SymbolicRegression.jl is the <code>equation_search</code> function. This takes a 2D array and attempts to model a 1D array using analytic functional forms. <strong>Note:</strong> unlike the MLJ interface, this assumes column-major input of shape [features, rows].</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SymbolicRegression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Options, equation_search</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> randn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(X[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, :]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, :] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    binary_operators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unary_operators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[cos, exp],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    populations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hall_of_fame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> equation_search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    X, y, niterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parallelism</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:multithreading</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>You can view the resultant equations in the dominating Pareto front (best expression seen at each complexity) with:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SymbolicRegression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calculate_pareto_frontier</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dominating </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> calculate_pareto_frontier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hall_of_fame)</span></span></code></pre></div><p>This is a vector of <code>PopMember</code> type - which contains the expression along with the cost. We can get the expressions with:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [member</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> member </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dominating]</span></span></code></pre></div><p>Each of these equations is an <code>Expression{T}</code> type for some constant type <code>T</code> (like <code>Float32</code>).</p><p>These expression objects are callable – you can simply pass in data:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trees[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X)</span></span></code></pre></div><h2 id="Constructing-expressions" tabindex="-1">Constructing expressions <a class="header-anchor" href="#Constructing-expressions" aria-label="Permalink to &quot;Constructing expressions {#Constructing-expressions}&quot;">​</a></h2><p>Expressions are represented under-the-hood as the <code>Node</code> type which is developed in the <a href="https://github.com/SymbolicML/DynamicExpressions.jl/" target="_blank" rel="noreferrer">DynamicExpressions.jl</a> package. The <code>Expression</code> type wraps this and includes metadata about operators and variable names.</p><p>You can manipulate and construct expressions directly. For example:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SymbolicRegression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Options, Expression, Node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    binary_operators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], unary_operators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[cos, exp, sin]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">operators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">operators</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">variable_names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x1, x2, x3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float64; feature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i); operators, variable_names) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x1</span></span></code></pre></div><p>This tree has <code>Float64</code> constants, so the type of the entire tree will be promoted to <code>Node{Float64}</code>.</p><p>We can convert all constants (recursively) to <code>Float32</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32_tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Expression{Float32}, tree)</span></span></code></pre></div><p>We can then evaluate this tree on a dataset:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X)</span></span></code></pre></div><p>This callable format is the easy-to-use version which will automatically set all values to NaN if there were any Inf or NaN during evaluation. You can call the raw evaluation method with <code>eval_tree_array</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output, did_succeed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eval_tree_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, X)</span></span></code></pre></div><p>where <code>did_succeed</code> explicitly declares whether the evaluation was successful.</p><h2 id="Exporting-to-SymbolicUtils.jl" tabindex="-1">Exporting to SymbolicUtils.jl <a class="header-anchor" href="#Exporting-to-SymbolicUtils.jl" aria-label="Permalink to &quot;Exporting to SymbolicUtils.jl {#Exporting-to-SymbolicUtils.jl}&quot;">​</a></h2><p>We can view the equations in the dominating Pareto frontier with:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dominating </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> calculate_pareto_frontier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hall_of_fame)</span></span></code></pre></div><p>We can convert the best equation to <a href="https://github.com/JuliaSymbolics/SymbolicUtils.jl" target="_blank" rel="noreferrer">SymbolicUtils.jl</a> with the following function:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SymbolicRegression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node_to_symbolic</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eqn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> node_to_symbolic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dominating[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tree)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simplify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eqn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>We can also print out the full pareto frontier like so:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SymbolicRegression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compute_complexity, string_tree</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Complexity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Equation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> member </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dominating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    complexity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_complexity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(member, options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> member</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loss</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string_tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(member</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tree, options)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(complexity)\\t$(loss)\\t$(string)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="Contributors" tabindex="-1">Contributors ✨ <a class="header-anchor" href="#Contributors" aria-label="Permalink to &quot;Contributors ✨ {#Contributors}&quot;">​</a></h2><p>We are eager to welcome new contributors! If you have an idea for a new feature, don&#39;t hesitate to share it on the <a href="https://github.com/MilesCranmer/SymbolicRegression.jl/issues" target="_blank" rel="noreferrer">issues</a> page or <a href="https://github.com/MilesCranmer/PySR/discussions" target="_blank" rel="noreferrer">forums</a>.</p>`,58),s("table",null,[s("tbody",null,[s("tr",null,[s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://www.linkedin.com/in/markkittisopikul/"},[s("img",{src:"https://avatars.githubusercontent.com/u/8062771?v=4?s=50",width:"50px;",alt:"Mark Kittisopikul"}),s("br"),s("sub",null,[s("b",null,"Mark Kittisopikul")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=mkitti",title:"Code"},"💻"),i(),s("a",{href:"#ideas-mkitti",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#infra-mkitti",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"#platform-mkitti",title:"Packaging/porting to new platform"},"📦"),i(),s("a",{href:"#promotion-mkitti",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Amkitti",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#tool-mkitti",title:"Tools"},"🔧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=mkitti",title:"Tests"},"⚠️")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/tttc3"},[s("img",{src:"https://avatars.githubusercontent.com/u/97948946?v=4?s=50",width:"50px;",alt:"T Coxon"}),s("br"),s("sub",null,[s("b",null,"T Coxon")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Atttc3",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=tttc3",title:"Code"},"💻"),i(),s("a",{href:"#plugin-tttc3",title:"Plugin/utility libraries"},"🔌"),i(),s("a",{href:"#ideas-tttc3",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#infra-tttc3",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"#maintenance-tttc3",title:"Maintenance"},"🚧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Atttc3",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#tool-tttc3",title:"Tools"},"🔧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=tttc3",title:"Tests"},"⚠️"),i(),s("a",{href:"#userTesting-tttc3",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/DhananjayAshok"},[s("img",{src:"https://avatars.githubusercontent.com/u/46792537?v=4?s=50",width:"50px;",alt:"Dhananjay Ashok"}),s("br"),s("sub",null,[s("b",null,"Dhananjay Ashok")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=DhananjayAshok",title:"Code"},"💻"),i(),s("a",{href:"#example-DhananjayAshok",title:"Examples."},"🌍"),i(),s("a",{href:"#ideas-DhananjayAshok",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#maintenance-DhananjayAshok",title:"Maintenance"},"🚧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=DhananjayAshok",title:"Tests"},"⚠️")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://gitlab.com/johanbluecreek"},[s("img",{src:"https://avatars.githubusercontent.com/u/852554?v=4?s=50",width:"50px;",alt:"Johan Blåbäck"}),s("br"),s("sub",null,[s("b",null,"Johan Blåbäck")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Ajohanbluecreek",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johanbluecreek",title:"Code"},"💻"),i(),s("a",{href:"#ideas-johanbluecreek",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#maintenance-johanbluecreek",title:"Maintenance"},"🚧"),i(),s("a",{href:"#promotion-johanbluecreek",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Ajohanbluecreek",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johanbluecreek",title:"Tests"},"⚠️"),i(),s("a",{href:"#userTesting-johanbluecreek",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://mathopt.de/people/martensen/index.php"},[s("img",{src:"https://avatars.githubusercontent.com/u/20998300?v=4?s=50",width:"50px;",alt:"JuliusMartensen"}),s("br"),s("sub",null,[s("b",null,"JuliusMartensen")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AAlCap23",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=AlCap23",title:"Code"},"💻"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=AlCap23",title:"Documentation"},"📖"),i(),s("a",{href:"#plugin-AlCap23",title:"Plugin/utility libraries"},"🔌"),i(),s("a",{href:"#ideas-AlCap23",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#infra-AlCap23",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"#maintenance-AlCap23",title:"Maintenance"},"🚧"),i(),s("a",{href:"#platform-AlCap23",title:"Packaging/porting to new platform"},"📦"),i(),s("a",{href:"#promotion-AlCap23",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AAlCap23",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#tool-AlCap23",title:"Tools"},"🔧"),i(),s("a",{href:"#userTesting-AlCap23",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/ngam"},[s("img",{src:"https://avatars.githubusercontent.com/u/67342040?v=4?s=50",width:"50px;",alt:"ngam"}),s("br"),s("sub",null,[s("b",null,"ngam")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ngam",title:"Code"},"💻"),i(),s("a",{href:"#infra-ngam",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"#platform-ngam",title:"Packaging/porting to new platform"},"📦"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Angam",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#tool-ngam",title:"Tools"},"🔧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ngam",title:"Tests"},"⚠️")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/kazewong"},[s("img",{src:"https://avatars.githubusercontent.com/u/8803931?v=4?s=50",width:"50px;",alt:"Kaze Wong"}),s("br"),s("sub",null,[s("b",null,"Kaze Wong")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Akazewong",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=kazewong",title:"Code"},"💻"),i(),s("a",{href:"#ideas-kazewong",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#infra-kazewong",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"#maintenance-kazewong",title:"Maintenance"},"🚧"),i(),s("a",{href:"#promotion-kazewong",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Akazewong",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#research-kazewong",title:"Research"},"🔬"),i(),s("a",{href:"#userTesting-kazewong",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/ChrisRackauckas"},[s("img",{src:"https://avatars.githubusercontent.com/u/1814174?v=4?s=50",width:"50px;",alt:"Christopher Rackauckas"}),s("br"),s("sub",null,[s("b",null,"Christopher Rackauckas")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AChrisRackauckas",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ChrisRackauckas",title:"Code"},"💻"),i(),s("a",{href:"#plugin-ChrisRackauckas",title:"Plugin/utility libraries"},"🔌"),i(),s("a",{href:"#ideas-ChrisRackauckas",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#infra-ChrisRackauckas",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"#promotion-ChrisRackauckas",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AChrisRackauckas",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#research-ChrisRackauckas",title:"Research"},"🔬"),i(),s("a",{href:"#tool-ChrisRackauckas",title:"Tools"},"🔧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ChrisRackauckas",title:"Tests"},"⚠️"),i(),s("a",{href:"#userTesting-ChrisRackauckas",title:"User Testing"},"📓")])]),s("tr",null,[s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://kidger.site/"},[s("img",{src:"https://avatars.githubusercontent.com/u/33688385?v=4?s=50",width:"50px;",alt:"Patrick Kidger"}),s("br"),s("sub",null,[s("b",null,"Patrick Kidger")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Apatrick-kidger",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=patrick-kidger",title:"Code"},"💻"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=patrick-kidger",title:"Documentation"},"📖"),i(),s("a",{href:"#plugin-patrick-kidger",title:"Plugin/utility libraries"},"🔌"),i(),s("a",{href:"#ideas-patrick-kidger",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#maintenance-patrick-kidger",title:"Maintenance"},"🚧"),i(),s("a",{href:"#promotion-patrick-kidger",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Apatrick-kidger",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#research-patrick-kidger",title:"Research"},"🔬"),i(),s("a",{href:"#tool-patrick-kidger",title:"Tools"},"🔧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=patrick-kidger",title:"Tests"},"⚠️"),i(),s("a",{href:"#userTesting-patrick-kidger",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/OkonSamuel"},[s("img",{src:"https://avatars.githubusercontent.com/u/39421418?v=4?s=50",width:"50px;",alt:"Okon Samuel"}),s("br"),s("sub",null,[s("b",null,"Okon Samuel")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AOkonSamuel",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=OkonSamuel",title:"Code"},"💻"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=OkonSamuel",title:"Documentation"},"📖"),i(),s("a",{href:"#maintenance-OkonSamuel",title:"Maintenance"},"🚧"),i(),s("a",{href:"#ideas-OkonSamuel",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#infra-OkonSamuel",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AOkonSamuel",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=OkonSamuel",title:"Tests"},"⚠️"),i(),s("a",{href:"#userTesting-OkonSamuel",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/w2ll2am"},[s("img",{src:"https://avatars.githubusercontent.com/u/16038228?v=4?s=50",width:"50px;",alt:"William Booth-Clibborn"}),s("br"),s("sub",null,[s("b",null,"William Booth-Clibborn")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=w2ll2am",title:"Code"},"💻"),i(),s("a",{href:"#example-w2ll2am",title:"Examples."},"🌍"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=w2ll2am",title:"Documentation"},"📖"),i(),s("a",{href:"#userTesting-w2ll2am",title:"User Testing"},"📓"),i(),s("a",{href:"#maintenance-w2ll2am",title:"Maintenance"},"🚧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Aw2ll2am",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#tool-w2ll2am",title:"Tools"},"🔧"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=w2ll2am",title:"Tests"},"⚠️")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://pablo-lemos.github.io/"},[s("img",{src:"https://avatars.githubusercontent.com/u/38078898?v=4?s=50",width:"50px;",alt:"Pablo Lemos"}),s("br"),s("sub",null,[s("b",null,"Pablo Lemos")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3APablo-Lemos",title:"Bug reports"},"🐛"),i(),s("a",{href:"#ideas-Pablo-Lemos",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#promotion-Pablo-Lemos",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3APablo-Lemos",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#research-Pablo-Lemos",title:"Research"},"🔬"),i(),s("a",{href:"#userTesting-Pablo-Lemos",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/Moelf"},[s("img",{src:"https://avatars.githubusercontent.com/u/5306213?v=4?s=50",width:"50px;",alt:"Jerry Ling"}),s("br"),s("sub",null,[s("b",null,"Jerry Ling")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AMoelf",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=Moelf",title:"Code"},"💻"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=Moelf",title:"Documentation"},"📖"),i(),s("a",{href:"#example-Moelf",title:"Examples."},"🌍"),i(),s("a",{href:"#ideas-Moelf",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#promotion-Moelf",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AMoelf",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#userTesting-Moelf",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/CharFox1"},[s("img",{src:"https://avatars.githubusercontent.com/u/35052672?v=4?s=50",width:"50px;",alt:"Charles Fox"}),s("br"),s("sub",null,[s("b",null,"Charles Fox")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3ACharFox1",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=CharFox1",title:"Code"},"💻"),i(),s("a",{href:"#ideas-CharFox1",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#maintenance-CharFox1",title:"Maintenance"},"🚧"),i(),s("a",{href:"#promotion-CharFox1",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3ACharFox1",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#research-CharFox1",title:"Research"},"🔬"),i(),s("a",{href:"#userTesting-CharFox1",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/johannbrehmer"},[s("img",{src:"https://avatars.githubusercontent.com/u/17068560?v=4?s=50",width:"50px;",alt:"Johann Brehmer"}),s("br"),s("sub",null,[s("b",null,"Johann Brehmer")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johannbrehmer",title:"Code"},"💻"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johannbrehmer",title:"Documentation"},"📖"),i(),s("a",{href:"#ideas-johannbrehmer",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#promotion-johannbrehmer",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Ajohannbrehmer",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#research-johannbrehmer",title:"Research"},"🔬"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johannbrehmer",title:"Tests"},"⚠️"),i(),s("a",{href:"#userTesting-johannbrehmer",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"http://www.cosmicmar.com/"},[s("img",{src:"https://avatars.githubusercontent.com/u/1510968?v=4?s=50",width:"50px;",alt:"Marius Millea"}),s("br"),s("sub",null,[s("b",null,"Marius Millea")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=marius311",title:"Code"},"💻"),i(),s("a",{href:"#ideas-marius311",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#promotion-marius311",title:"Promotion"},"📣"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Amarius311",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#userTesting-marius311",title:"User Testing"},"📓")])]),s("tr",null,[s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://gitlab.com/cobac"},[s("img",{src:"https://avatars.githubusercontent.com/u/27872944?v=4?s=50",width:"50px;",alt:"Coba"}),s("br"),s("sub",null,[s("b",null,"Coba")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Acobac",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=cobac",title:"Code"},"💻"),i(),s("a",{href:"#ideas-cobac",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Acobac",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#userTesting-cobac",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/pitmonticone"},[s("img",{src:"https://avatars.githubusercontent.com/u/38562595?v=4?s=50",width:"50px;",alt:"Pietro Monticone"}),s("br"),s("sub",null,[s("b",null,"Pietro Monticone")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Apitmonticone",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=pitmonticone",title:"Documentation"},"📖"),i(),s("a",{href:"#ideas-pitmonticone",title:"Ideas, planning, and feedback."},"💡")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/sheevy"},[s("img",{src:"https://avatars.githubusercontent.com/u/1525683?v=4?s=50",width:"50px;",alt:"Mateusz Kubica"}),s("br"),s("sub",null,[s("b",null,"Mateusz Kubica")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=sheevy",title:"Documentation"},"📖"),i(),s("a",{href:"#ideas-sheevy",title:"Ideas, planning, and feedback."},"💡")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://jaywadekar.github.io/"},[s("img",{src:"https://avatars.githubusercontent.com/u/5493388?v=4?s=50",width:"50px;",alt:"Jay Wadekar"}),s("br"),s("sub",null,[s("b",null,"Jay Wadekar")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AJayWadekar",title:"Bug reports"},"🐛"),i(),s("a",{href:"#ideas-JayWadekar",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#promotion-JayWadekar",title:"Promotion"},"📣"),i(),s("a",{href:"#research-JayWadekar",title:"Research"},"🔬")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/ablaom"},[s("img",{src:"https://avatars.githubusercontent.com/u/30517088?v=4?s=50",width:"50px;",alt:"Anthony Blaom, PhD"}),s("br"),s("sub",null,[s("b",null,"Anthony Blaom, PhD")])]),s("br"),s("a",{href:"#infra-ablaom",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇"),i(),s("a",{href:"#ideas-ablaom",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Aablaom",title:"Reviewed Pull Requests"},"👀")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/Jgmedina95"},[s("img",{src:"https://avatars.githubusercontent.com/u/97254349?v=4?s=50",width:"50px;",alt:"Jgmedina95"}),s("br"),s("sub",null,[s("b",null,"Jgmedina95")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AJgmedina95",title:"Bug reports"},"🐛"),i(),s("a",{href:"#ideas-Jgmedina95",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AJgmedina95",title:"Reviewed Pull Requests"},"👀")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/mcabbott"},[s("img",{src:"https://avatars.githubusercontent.com/u/32575566?v=4?s=50",width:"50px;",alt:"Michael Abbott"}),s("br"),s("sub",null,[s("b",null,"Michael Abbott")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=mcabbott",title:"Code"},"💻"),i(),s("a",{href:"#ideas-mcabbott",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Amcabbott",title:"Reviewed Pull Requests"},"👀"),i(),s("a",{href:"#tool-mcabbott",title:"Tools"},"🔧")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/oscardssmith"},[s("img",{src:"https://avatars.githubusercontent.com/u/11729272?v=4?s=50",width:"50px;",alt:"Oscar Smith"}),s("br"),s("sub",null,[s("b",null,"Oscar Smith")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=oscardssmith",title:"Code"},"💻"),i(),s("a",{href:"#ideas-oscardssmith",title:"Ideas, planning, and feedback."},"💡")])]),s("tr",null,[s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://ericphanson.com/"},[s("img",{src:"https://avatars.githubusercontent.com/u/5846501?v=4?s=50",width:"50px;",alt:"Eric Hanson"}),s("br"),s("sub",null,[s("b",null,"Eric Hanson")])]),s("br"),s("a",{href:"#ideas-ericphanson",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#promotion-ericphanson",title:"Promotion"},"📣"),i(),s("a",{href:"#userTesting-ericphanson",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/henriquebecker91"},[s("img",{src:"https://avatars.githubusercontent.com/u/14113435?v=4?s=50",width:"50px;",alt:"Henrique Becker"}),s("br"),s("sub",null,[s("b",null,"Henrique Becker")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=henriquebecker91",title:"Code"},"💻"),i(),s("a",{href:"#ideas-henriquebecker91",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Ahenriquebecker91",title:"Reviewed Pull Requests"},"👀")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/qwertyjl"},[s("img",{src:"https://avatars.githubusercontent.com/u/110912592?v=4?s=50",width:"50px;",alt:"qwertyjl"}),s("br"),s("sub",null,[s("b",null,"qwertyjl")])]),s("br"),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Aqwertyjl",title:"Bug reports"},"🐛"),i(),s("a",{href:"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=qwertyjl",title:"Documentation"},"📖"),i(),s("a",{href:"#ideas-qwertyjl",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#userTesting-qwertyjl",title:"User Testing"},"📓")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://huijzer.xyz/"},[s("img",{src:"https://avatars.githubusercontent.com/u/20724914?v=4?s=50",width:"50px;",alt:"Rik Huijzer"}),s("br"),s("sub",null,[s("b",null,"Rik Huijzer")])]),s("br"),s("a",{href:"#ideas-rikhuijzer",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#infra-rikhuijzer",title:"Infrastructure (Hosting, Build-Tools, etc)"},"🚇")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://github.com/GCaptainNemo"},[s("img",{src:"https://avatars.githubusercontent.com/u/43086239?v=4?s=50",width:"50px;",alt:"Hongyu Wang"}),s("br"),s("sub",null,[s("b",null,"Hongyu Wang")])]),s("br"),s("a",{href:"#ideas-GCaptainNemo",title:"Ideas, planning, and feedback."},"💡"),i(),s("a",{href:"#promotion-GCaptainNemo",title:"Promotion"},"📣"),i(),s("a",{href:"#research-GCaptainNemo",title:"Research"},"🔬")]),s("td",{align:"center",valign:"top",width:"12.5%"},[s("a",{href:"https://sauravmaheshkar.github.io/"},[s("img",{src:"https://avatars.githubusercontent.com/u/61241031?v=4?s=50",width:"50px;",alt:"Saurav Maheshkar"}),s("br"),s("sub",null,[s("b",null,"Saurav Maheshkar")])]),s("br"),s("a",{href:"#tool-SauravMaheshkar",title:"Tools"},"🔧")])])])],-1),e(`<h2 id="Code-structure" tabindex="-1">Code structure <a class="header-anchor" href="#Code-structure" aria-label="Permalink to &quot;Code structure {#Code-structure}&quot;">​</a></h2><p>SymbolicRegression.jl is organized roughly as follows. Rounded rectangles indicate objects, and rectangles indicate functions.</p><blockquote><p>(if you can&#39;t see this diagram being rendered, try pasting it into <a href="https://mermaid-js.github.io/mermaid-live-editor" target="_blank" rel="noreferrer">mermaid-js.github.io/mermaid-live-editor</a>)</p></blockquote><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    op([Options])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    d([Dataset])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    op --&gt; ES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    d --&gt; ES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph ES[equation_search]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        direction TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        IP[sr_spawner]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        IP --&gt; p1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        IP --&gt; p2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        subgraph p1[Thread 1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            direction LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pop1([Population])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pop1 --&gt; src[s_r_cycle]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            src --&gt; opt[optimize_and_simplify_population]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            opt --&gt; pop1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        subgraph p2[Thread 2]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            direction LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pop2([Population])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pop2 --&gt; src2[s_r_cycle]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            src2 --&gt; opt2[optimize_and_simplify_population]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            opt2 --&gt; pop2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pop1 --&gt; hof</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pop2 --&gt; hof</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hof([HallOfFame])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hof --&gt; migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pop1 &lt;-.-&gt; migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pop2 &lt;-.-&gt; migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        migration[migrate!]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ES --&gt; output([HallOfFame])</span></span></code></pre></div><p>The <code>HallOfFame</code> objects store the expressions with the lowest loss seen at each complexity.</p><p>The dependency structure of the code itself is as follows:</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stateDiagram-v2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AdaptiveParsimony --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AdaptiveParsimony --&gt; Population</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AdaptiveParsimony --&gt; RegularizedEvolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AdaptiveParsimony --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AdaptiveParsimony --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AdaptiveParsimony --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CheckConstraints --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CheckConstraints --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; CheckConstraints</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; HallOfFame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; LossFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; MLJInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; PopMember</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; Population</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Complexity --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ConstantOptimization --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ConstantOptimization --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ConstantOptimization --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; AdaptiveParsimony</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; CheckConstraints</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; Complexity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; ConstantOptimization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; DimensionalAnalysis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; HallOfFame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; InterfaceDynamicExpressions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; LossFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; MLJInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; Migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; MutationFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; PopMember</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; Population</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; Recorder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; RegularizedEvolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Core --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Dataset --&gt; Core</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DimensionalAnalysis --&gt; LossFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ExpressionBuilder --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HallOfFame --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HallOfFame --&gt; MLJInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HallOfFame --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HallOfFame --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HallOfFame --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HallOfFame --&gt; deprecates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    InterfaceDynamicExpressions --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    InterfaceDynamicExpressions --&gt; HallOfFame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    InterfaceDynamicExpressions --&gt; LossFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    InterfaceDynamicExpressions --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    InterfaceDynamicQuantities --&gt; Dataset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    InterfaceDynamicQuantities --&gt; MLJInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; ConstantOptimization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; PopMember</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; Population</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LossFunctions --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MLJInterface --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Migration --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Mutate --&gt; RegularizedEvolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationFunctions --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationFunctions --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationFunctions --&gt; Population</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationFunctions --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationFunctions --&gt; deprecates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationWeights --&gt; Core</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationWeights --&gt; Options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MutationWeights --&gt; OptionsStruct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Operators --&gt; Core</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Operators --&gt; Options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Options --&gt; Core</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OptionsStruct --&gt; Core</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OptionsStruct --&gt; Options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OptionsStruct --&gt; Options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; ConstantOptimization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; HallOfFame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; Migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; Population</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PopMember --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Population --&gt; ExpressionBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Population --&gt; Migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Population --&gt; RegularizedEvolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Population --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Population --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Population --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProgramConstants --&gt; Core</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProgramConstants --&gt; Dataset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProgramConstants --&gt; Operators</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProgressBars --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProgressBars --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Recorder --&gt; Mutate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Recorder --&gt; RegularizedEvolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Recorder --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Recorder --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RegularizedEvolution --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SearchUtils --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SingleIteration --&gt; SymbolicRegression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; ConstantOptimization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; Dataset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; DimensionalAnalysis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; HallOfFame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; InterfaceDynamicExpressions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; MLJInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; Migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; Operators</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; Options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; PopMember</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; Population</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; RegularizedEvolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; SearchUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; SingleIteration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Utils --&gt; SymbolicRegression</span></span></code></pre></div><p>Bash command to generate dependency structure from <code>src</code> directory (requires <code>vim-stream</code>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;stateDiagram-v2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IFS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> *.jl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;import \\.\\.&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;import \\.&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;using \\.&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;using \\.\\.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vims</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dwf:d$&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%s/^\\.*//g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%s/Module//g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .jl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vims</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;f a--&gt; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span></span></code></pre></div><h2 id="Search-options" tabindex="-1">Search options <a class="header-anchor" href="#Search-options" aria-label="Permalink to &quot;Search options {#Search-options}&quot;">​</a></h2><p>See <a href="https://ai.damtp.cam.ac.uk/symbolicregression/stable/api/#Options" target="_blank" rel="noreferrer">https://ai.damtp.cam.ac.uk/symbolicregression/stable/api/#Options</a></p><h1 id="Contents" tabindex="-1">Contents <a class="header-anchor" href="#Contents" aria-label="Permalink to &quot;Contents {#Contents}&quot;">​</a></h1><ul><li><a href="./examples#Toy-Examples-with-Code">Toy Examples with Code</a><ul><li><a href="./examples#1.-Simple-search">1. Simple search</a></li><li><a href="./examples#2.-Custom-operator">2. Custom operator</a></li><li><a href="./examples#3.-Multiple-outputs">3. Multiple outputs</a></li><li><a href="./examples#4.-Plotting-an-expression">4. Plotting an expression</a></li><li><a href="./examples#5.-Other-types">5. Other types</a></li><li><a href="./examples#6.-Dimensional-constraints">6. Dimensional constraints</a></li><li><a href="./examples#7.-Working-with-Expressions">7. Working with Expressions</a></li><li><a href="./examples#8.-Template-Expressions">8. Template Expressions</a></li><li><a href="./examples#9.-Logging-with-TensorBoard">9. Logging with TensorBoard</a></li><li><a href="./examples#10.-Using-Differential-Operators">10. Using Differential Operators</a></li><li><a href="./examples#11.-Seeding-search-with-initial-guesses">11. Seeding search with initial guesses</a></li><li><a href="./examples#12.-Higher-arity-operators">12. Higher arity operators</a></li><li><a href="./examples#13.-Additional-features">13. Additional features</a></li></ul></li><li><a href="./examples/template_expression#Searching-with-template-expressions">Searching with template expressions</a><ul><li><a href="./examples/template_expression#The-Physical-Problem">The Physical Problem</a></li></ul></li><li><a href="./api#api">API</a><ul><li><a href="./api#MLJ-interface">MLJ interface</a></li><li><a href="./api#Low-Level-API">Low Level API</a></li><li><a href="./api#options">Options</a></li><li><a href="./api#printing">Printing</a></li><li><a href="./api#evaluation">Evaluation</a></li><li><a href="./api#derivatives">Derivatives</a></li><li><a href="./api#SymbolicUtils.jl-interface">SymbolicUtils.jl interface</a></li><li><a href="./api#Pareto-frontier">Pareto frontier</a></li><li><a href="./api#logging">Logging</a></li></ul></li><li><a href="./types#types">Types</a><ul><li><a href="./types#equations">Equations</a></li><li><a href="./types#expressions">Expressions</a></li><li><a href="./types#population">Population</a></li><li><a href="./types#Population-members">Population members</a></li><li><a href="./types#Hall-of-Fame">Hall of Fame</a></li><li><a href="./types#dataset">Dataset</a></li></ul></li><li><a href="./losses#losses">Losses</a><ul><li><a href="./losses#regression">Regression</a></li><li><a href="./losses#classification">Classification</a></li></ul></li></ul>`,13)]))}const u=t(h,[["render",p]]);export{E as __pageData,u as default};
