import{_ as k,c as n,o as h,j as s,aA as t,a}from"./chunks/framework.tHd97Swc.js";const T=JSON.parse('{"title":"Working with Custom Input Types","description":"","frontmatter":{},"headers":[],"relativePath":"examples/custom_types.md","filePath":"examples/custom_types.md","lastUpdated":null}'),l={name:"examples/custom_types.md"},p={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},e={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"80.588ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 35620.1 1000","aria-hidden":"true"};function r(E,i,d,g,y,F){return h(),n("div",null,[i[2]||(i[2]=s("h1",{id:"Working-with-Custom-Input-Types",tabindex:"-1"},[a("Working with Custom Input Types "),s("a",{class:"header-anchor",href:"#Working-with-Custom-Input-Types","aria-label":'Permalink to "Working with Custom Input Types {#Working-with-Custom-Input-Types}"'},"​")],-1)),i[3]||(i[3]=s("p",null,"Say that you have some custom input type you want to evolve an expression for. It doesn't even need to be a numerical type. It could be anything –- even a string!",-1)),i[4]||(i[4]=s("p",null,[a("Let's actually try this. Let's evolve an "),s("em",null,"expression over strings"),a(".")],-1)),i[5]||(i[5]=s("p",null,"First, we mock up a dataset. Say that we wish to find the expression",-1)),s("mjx-container",p,[(h(),n("svg",e,[...i[0]||(i[0]=[t("",1)])])),i[1]||(i[1]=s("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mi",null,"y"),s("mo",null,"="),s("mtext",null,"zip"),s("mo",{stretchy:"false"},"("),s("mtext",null,"concat"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"x"),s("mn",null,"1")]),s("mo",null,","),s("mtext",null,"concat"),s("mo",{stretchy:"false"},"("),s("mtext",null,"“abc”"),s("mo",null,","),s("msub",null,[s("mi",null,"x"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,","),s("mtext",null,"concat"),s("mo",{stretchy:"false"},"("),s("mtext",null,"concat"),s("mo",{stretchy:"false"},"("),s("mtext",null,"tail"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"x"),s("mn",null,"3")]),s("mo",{stretchy:"false"},")"),s("mo",null,","),s("mtext",null,"reverse"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"x"),s("mn",null,"4")]),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,","),s("mtext",null,"“xyz”"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")])],-1))]),i[6]||(i[6]=t("",40))])}const c=k(l,[["render",r]]);export{T as __pageData,c as default};
